<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tanxiaoluo&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-27T14:32:24.810Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>tanxiaoluo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如果优雅的&quot;停止&quot;一个正在运行的JAVA线程</title>
    <link href="http://yoursite.com/2016/04/27/%E5%A6%82%E6%9E%9C%E4%BC%98%E9%9B%85%E7%9A%84-%E5%81%9C%E6%AD%A2-%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84JAVA%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/04/27/如果优雅的-停止-一个正在运行的JAVA线程/</id>
    <published>2016-04-27T14:23:19.000Z</published>
    <updated>2016-04-27T14:32:24.810Z</updated>
    
    <content type="html">&lt;p&gt;最近在开发过程中，遇到一个需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当用户输完快递单号后，发起请求，自动补全手机号码&lt;/li&gt;
&lt;li&gt;请求超过5秒后结束请求，并提示用户没找到手机号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u7B2C_u4E00_u53D1&quot;&gt;&lt;a href=&quot;#u7B2C_u4E00_u53D1&quot; class=&quot;headerlink&quot; title=&quot;第一发&quot;&gt;&lt;/a&gt;第一发&lt;/h2&gt;&lt;p&gt;很简单的需求，是吧。然后我就啪啪啪写下了代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void request() {

    thread = new Thread(new Runnable() {
        @Override
        public void run() {
            // 请求网络
            // ...
            // ...
            // 返回结果请求To UI
        }
    });

    thread.start();

    new Handler().postDelayed(new Runnable() {
        @Override
        public void run() {
            thread.stop();
        }
    }, 5 * 1000);

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看起来是这么的完美。不过这个stop上面有一根删除线是什么鬼。它的文档是这样描述的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Requests the receiver Thread to stop and throw ThreadDeath. The Thread is resumed if it was suspended and awakened if it was sleeping, so that it can proceed to throw ThreadDeath.&lt;br&gt;@deprecated&lt;br&gt;because stopping a thread in this manner is unsafe and can leave your application and the VM in an unpredictable state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思就是，调用这个方法会抛出一个ThreadDeath的异常。用这个方法去停止一个线程是不安全的，它会让你的应用和VM处于一个不可预知的状态。&lt;/p&gt;
&lt;h2 id=&quot;u7B2C_u4E8C_u53D1&quot;&gt;&lt;a href=&quot;#u7B2C_u4E8C_u53D1&quot; class=&quot;headerlink&quot; title=&quot;第二发&quot;&gt;&lt;/a&gt;第二发&lt;/h2&gt;&lt;p&gt;stop()方法是不安全的，故不再使用，在api中还有一个interrupt()方法。&lt;br&gt;我们接下来看看这个interrupt()是怎么个用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果该线程正阻塞于Object类的wait()、wait(long)、wait(long, int)方法，或者Thread类的join()、join(long)、join(long, int)、sleep(long)、sleep(long, int)方法，则该线程的中断状态将被清除，并收到一个java.lang.InterruptedException。&lt;/li&gt;
&lt;li&gt;如果该线程正阻塞于interruptible channel上的I/O操作，则该通道将被关闭，同时该线程的中断状态被设置，并收到一个java.nio.channels.ClosedByInterruptException。&lt;/li&gt;
&lt;li&gt;如果该线程正阻塞于一个java.nio.channels.Selector操作，则该线程的中断状态被设置，它将立即从选择操作返回，并可能带有一个非零值，就好像调用java.nio.channels.Selector.wakeup()方法一样。&lt;/li&gt;
&lt;li&gt;如果上述条件都不成立，则该线程的中断状态将被设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从这个描述中，可以看出，interrupt()并不会直接的去停止线程，而是去设置一个中断状态，也就是打了一个标记，系统在合适的时候会去停止这个线程。&lt;/p&gt;
&lt;p&gt;提到interrupt()，有两个方法就不得不说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static boolean interrupted() {
    return currentThread().isInterrupted(true);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检测当前线程是否中断，是就返回true，否则false，并清除中断状态（就是把中断标志设置为false）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public boolean isInterrupted() {
    return isInterrupted(false);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检测当前线程是否已经中断，是则返回true，否则false。中断状态不受该方法的影响。如果中断调用时线程已经不处于活动状态，则返回false。&lt;/p&gt;
&lt;p&gt;这两个方法长得有点像，故使用的时候要注意一下子。&lt;/p&gt;
&lt;p&gt;这么看来，一个正在运行的线程是不能立即被安全的停止，当然这是对于机器来说，但是我们可以控制这个线程在某时间停止或者说在某种条件下停止。&lt;/p&gt;
&lt;p&gt;那么新版的代码来了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void request() {

    thread = new Thread(new Runnable() {
        @Override
        public void run() {
            // 请求网络
            // ...
            // ...
            if (thread != null &amp;amp;&amp;amp; !thread.isInterrupted()) {
                // 返回结果请求To UI
            }
        }
    });

    thread.start();

    new Handler().postDelayed(new Runnable() {
        @Override
        public void run() {
            if (thread != null &amp;amp;&amp;amp; thread.isAlive()) {
                thread.interrupt();
            }
        }
    }, 5 * 1000);

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看上去很不错。当我在review code的时候，发现了一些问题。&lt;br&gt;&lt;em&gt;举个栗子&lt;/em&gt;&lt;br&gt;第一个请求过来了，用时2秒，这个时候我们的handler还在跑。第4秒，又来了一个请求，第5秒，handler的时间到了，此刻的thread指向于新的一次请求，于是我们的一个完美请求就被中断掉了。&lt;/p&gt;
&lt;h2 id=&quot;u7B2C_u4E09_u53D1&quot;&gt;&lt;a href=&quot;#u7B2C_u4E09_u53D1&quot; class=&quot;headerlink&quot; title=&quot;第三发&quot;&gt;&lt;/a&gt;第三发&lt;/h2&gt;&lt;p&gt;当然这也是有解决办法的，我们在第二次请求的时候，首先把前一次的定时任务给取消掉。基于这个需求，我们可以使用Timer，ScheduledExecutorService，HandlerThread，包括第二发中的Handler都是可以的。&lt;br&gt;经过网上的东看看西逛逛，最终选择ScheduledExecutorService作为这个定时器。&lt;/p&gt;
&lt;p&gt;最终版代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private QueryThread queryThread;
private ScheduledExecutorService executor;

public void request() {
    if (queryThread != null &amp;amp;&amp;amp; queryThread.isAlive()) {
        queryThread.interrupt();
        executor.shutdownNow();
    }
    queryThread = new QueryThread();
    queryThread.start();

    executor = Executors.newScheduledThreadPool(1);
    executor.schedule(new Runnable() {
        @Override
        public void run() {
            if (!queryThread.isInterrupted()) {
                queryThread.interrupt();
                // 告知UI
            }
        }
    }, 5 * 1000, TimeUnit.MILLISECONDS);
}

class QueryThread extends Thread {
    @Override
    public void run() {
        // 请求网络
        // ...
        // ...
        if (!isInterrupted()) {
            // 返回结果请求UI
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;u7B2C_u56DB_u53D1&quot;&gt;&lt;a href=&quot;#u7B2C_u56DB_u53D1&quot; class=&quot;headerlink&quot; title=&quot;第四发&quot;&gt;&lt;/a&gt;第四发&lt;/h2&gt;&lt;p&gt;这次来谈谈最佳实践（这部分是引用的）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class BestPractice extends Thread {
    private volatile boolean finished = false;   // ① volatile条件变量
    public void stopMe() {
        finished = true;    // ② 发出停止信号
    }
    @Override
    public void run() {
        while (!finished) {    // ③ 检测条件变量
            // do dirty work   // ④业务代码
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当④处的代码阻塞于wait()或sleep()时，线程不能立刻检测到条件变量。因此②处的代码最好同时调用interrupt()方法。&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u6587_u732E&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u6587_u732E&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://ibruce.info/2013/12/19/how-to-stop-a-java-thread/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何停止一个正在运行的java线程&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在开发过程中，遇到一个需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当用户输完快递单号后，发起请求，自动补全手机号码&lt;/li&gt;
&lt;li&gt;请求超过5秒后结束请求，并提示用户没找到手机号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u7B2C_u4E00_u53D1&quot;&gt;&lt;a href=&quot;#u7B2C_u4E00_u53D1&quot; class=&quot;headerlink&quot; title=&quot;第一发&quot;&gt;&lt;/a&gt;第一发&lt;/h2&gt;&lt;p&gt;很简单的需求，是吧。然后我就啪啪啪写下了代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void request() {

    thread = new Thread(new Runnable() {
        @Override
        public void run() {
            // 请求网络
            // ...
            // ...
            // 返回结果请求To UI
        }
    });

    thread.start();

    new Handler().postDelayed(new Runnable() {
        @Override
        public void run() {
            thread.stop();
        }
    }, 5 * 1000);

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看起来是这么的完美。不过这个stop上面有一根删除线是什么鬼。它的文档是这样描述的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>生活总是得记录一下</title>
    <link href="http://yoursite.com/2016/03/18/hello-hexo/"/>
    <id>http://yoursite.com/2016/03/18/hello-hexo/</id>
    <published>2016-03-18T13:11:22.000Z</published>
    <updated>2016-04-27T14:48:51.366Z</updated>
    
    <content type="html">&lt;h1 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;p&gt;一直嚷嚷着要建一个博客，但是由于各种原因（当然主要是因为懒）。最近刚刚换了一家公司，产品处于调整期，于是我就有了大把大把的时间向博客说一声hello world。&lt;/p&gt;
&lt;h1 id=&quot;hello_world&quot;&gt;&lt;a href=&quot;#hello_world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h1&gt;&lt;p&gt;既然谈到了”hello world”,那么就用那些年听到的一个段子作为开头。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序员告老还乡,想安度晚年,于是决定在书法上有所造诣。一日,饭后突生雅兴,一番研墨拟纸,并点上上好檀香。定神片刻,泼墨挥毫,挥起毛笔在白纸上郑重的写下: Hello World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这是当年学习Android时候,看Mars老师的视频学习到的段子。在此特别感谢Mars老师带我领走入我Android学习之路，一个大写的感谢。&lt;/p&gt;
&lt;h1 id=&quot;why_Hexo&quot;&gt;&lt;a href=&quot;#why_Hexo&quot; class=&quot;headerlink&quot; title=&quot;why Hexo&quot;&gt;&lt;/a&gt;why Hexo&lt;/h1&gt;&lt;p&gt;原计划是打算在新浪云上自己搭建一个blog，但是懒癌严重的我一直拖到了新浪云开始对普通用户收费，都还没有下定决心去hello world一下。今天刷V2的时候，看到了一篇&lt;a href=&quot;http://v2ex.com/t/264283&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo 部署 Github， Coding 进行国内外分流最全教程&lt;/a&gt;，终于开始了博客之路。&lt;/p&gt;
&lt;h1 id=&quot;u642D_u5EFA_u8FC7_u7A0B&quot;&gt;&lt;a href=&quot;#u642D_u5EFA_u8FC7_u7A0B&quot; class=&quot;headerlink&quot; title=&quot;搭建过程&quot;&gt;&lt;/a&gt;搭建过程&lt;/h1&gt;&lt;p&gt;搭建过程倒没什么好说的，毕竟教程里面都有。不过在搭建过程中的一些选择着实让人伤脑。首先是blog名字，关于这个起名字，韩寒在《长安乱》中大肆吐槽。再接着是签名，想了下用了一句易经中的“元亨利牡马之贞”，这句话可有意思了，有时间可以详细来吹吹。接着是主题的选择，选择了&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt;,一个简单清爽的主题。&lt;/p&gt;
&lt;h1 id=&quot;u751F_u6D3B_u603B_u662F_u5F97_u8BB0_u5F55_u4E00_u4E0B&quot;&gt;&lt;a href=&quot;#u751F_u6D3B_u603B_u662F_u5F97_u8BB0_u5F55_u4E00_u4E0B&quot; class=&quot;headerlink&quot; title=&quot;生活总是得记录一下&quot;&gt;&lt;/a&gt;生活总是得记录一下&lt;/h1&gt;&lt;p&gt;一天，许许多多的事情在发生，总得记录一下。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;p&gt;一直嚷嚷着要建一个博客，但是由于各种原因（当然主要是因为懒）。最近刚刚换了一家公司，产品处于调整期，于是我就有了大把大把的时间向博客说一声hello world。&lt;/p&gt;
&lt;h1 id=&quot;hello_world&quot;&gt;&lt;a href=&quot;#hello_world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h1&gt;&lt;p&gt;既然谈到了”hello world”,那么就用那些年听到的一个段子作为开头。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序员告老还乡,想安度晚年,于是决定在书法上有所造诣。一日,饭后突生雅兴,一番研墨拟纸,并点上上好檀香。定神片刻,泼墨挥毫,挥起毛笔在白纸上郑重的写下: Hello World&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
